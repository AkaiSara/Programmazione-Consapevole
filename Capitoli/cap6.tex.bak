\chapter{Alla Ricerca dell'Invariante Perduto}
\noindent In questo Capitolo intendiamo rispondere ad una domanda che tipicamente gli studenti si e soprattutto ci (a noi docenti) rivolgono quando viene loro chiesto di costruire la prova di correttezza dei loro programmi e cioè, "come faccio a trovare le asserzioni ed, in particolare, gli invarianti dei cicli?".
La prima risposta che viene in mente è "bisogna pensarci su", ma in realtà è possibile dire qualcosa di più utile.
Quando dobbiamo realizzare un programma per eseguire una certa operazione, il punto di partenza ineludibile è la chiara comprensione sia della situazione del calcolo nella quale il programma verrà eseguito sia della situazione del calcolo che dovrà essere realizzata alla fine della sua esecuzione.
Specificare queste 2 cose coincide con la scrittura della pre- e della postcondizione.
È innegabile che la scrittura precisa di queste due asserzioni è necessaria prima di iniziare a scrivere il codice della funzione stessa.
Mostreremo con qualche esempio che la postcondizione può guidarci nella determinazione degli invarianti dei cicli contenuti nel programma.
In sostanza illustreremo una semplice tecnica che permette di derivare automaticamente dalla postcondizione un'asserzione che in alcuni casi è l'invariante che cerchiamo e, nei casi meno fortunati, è comunque utile a trovare l'invariante.
Spiegheremo questa tecnica risolvendo alcuni esercizi che riguardano le seguenti nozioni.

\paragraph{Definizione 6.1}
\textit{Dati 2 insiemi A e B, diremo che A è contenuto in B se ogni elemento di A è anche in B. Si noti che anche nel caso A e B fossero uguali, \textbf{A è contenuto in B}. Se invece consideriamo 2 multi-insiemi A e B, cioè insiemi che possono contenere occorrenze multiple dei valori, allora diremo che \textbf{A è m-contenuto in B}, quando per ogni valore v in A, se il numero delle occorrenze div in A è A(v), allora v è contenuto anche in B e B(v)>=A(v).}

\bigskip

Dato un array \texttt{C[r][k]} sia R una sua riga e K una sua colonna.
Possiamo vedere R e K come insiemi e chiederci se R è contenuto in K, oppure possiamo vedere R e K come multi-insiemi e chiederci se R è m-contenuto in K.
Per essere certi che la differenza sia chiara diamo il seguente esempio: 

\newpage

\textbf{Esempio:} sia R=[0,1,0,2,0] e K=[2,0,1,0]. R è contenuto in K, mentre non è m-contenuto in K in quanto R(0)>K(0). Invece K è sia contenuto che m-contenuto in R. 

\paragraph{Esercizio Risolto 6.1}
\textit{Il primo problema che vogliamo affrontare è il seguente:}
\textit{dato un array \texttt{int C[6][5]} vogliamo riempire un array 
\texttt{bool B[6][5]} in modo che
$\forall{i} \in [0..5]$ and $\forall{j} \in [0..4]$, \texttt{B[i][j]=true} se e solo se (sse) la riga \texttt{C[i]} è contenuta nella colonna \texttt{C[..][j]}\footnote[1]{Con la notazione \texttt{C[..][j]}, nel seguito indicheremo la colonna \texttt{j} di C.}.}

\textit{Si osservi che viene considerato il contenimento semplice tra insiemi e non l'm-contenimento, vedi la Definizione 6.1.
Prima di occuparci della definizione di \texttt{B}, dobbiamo riempire di valori interi l'array \texttt{C}.
A questo fine, facciamo l'ipotesi di avere un file che si chiama input che contiene almeno 30 interi che useremo per riempire C.
L'operazione di lettura dei 30 interi dal file è un esempio veramente semplice e lo sfruttiamo per iniziare ad introdurre, nel modo più semplice possibile, la tecnica di costruzione degli invarianti che abbiamo annunciato all'inizio di questo Capitolo.
L'ipotesi fatta in precedenza sul file input si traduce nella seguente precondizione:}
\textbf{PRE=(il file \texttt{input} contiene almeno 30 interi)}
\textit{dalla quale segue che non dobbiamo preoccuparci di controllare se il file termina prima di aver letto i 30 interi.
Dobbiamo "aprire" il file e dichiarare l'array \texttt{C} delle dimensioni previste:}

\begin{codice}

ifstream IN("input");
int C[6][5];
\end{codice}

\textit{e procedere a leggere i 30 interi da \texttt{IN} in \texttt{C} senza preoccuparci di altro.
È chiaro che ci servono 2 cicli annidati, il primo che scorre le righe e quello interno che riempie ciascuna riga scorrendo le colonne.
Supponiamo che l'indice che scorre le righe sia \texttt{i} e quello che scorre le colonne sia \texttt{j}.
Deriveremo gli invarianti di questi cicli, in modo meccanico, dall'asserzione \textbf{POST} che deve essere vera dopo la lettura.
La speranza (che sarà mantenuta) è che in questo modo sarà facile dimostrare che la \textbf{POST} è vera quando la lettura termina.
Questa tecnica viene chiamata \textbf{ricetta di indicizzazione}. Vediamo in cosa consiste.}

\textit{Iniziamo col precisare cosa vogliamo sia vero dopo la lettura.
Ovviamente vogliamo che \texttt{C} sia riempita di interi.
Esprimere questa proprietà è facile:}

\noindent \textbf{POST=($\forall$a $\in$ [0..5] e $\forall$b $\in$ [0..4], \texttt{C[a][b]} è definito)}.

\textit{Il primo ciclo, che scorre le righe con l'indice \texttt{i}, dovrà dire che il riempimento di \texttt{C} è arrivato a riempire fino alla riga \texttt{i-1} ed infatti esso è ricavabile da \textbf{POST} sostituendo a 5 il valore \texttt{i-1}, ottenendo il seguente invariante:}

\noindent \textbf{R1=($\forall$a $\in$ [0..i-1] e $\forall$b $\in$ [0..4], \texttt{C[a][b]} è definito)}, 
\textit{a cui dobbiamo aggiungere il campo di variabilità di i, cioè} \textbf{(0$\leq$i$\leq$6)}.
\textit{Quindi \textbf{R1} lo si ottiene da \textbf{POST} sostituendo a 5 l'indice del ciclo \texttt{i-1}.
Ecco spiegato il nome di ricetta di indicizzazione.
La relazione che questa ricetta istituisce tra \textbf{POST} e \textbf{R1} rende automatica una parte della prova di correttezza del ciclo.}

\textit{La regola di verifica del while (vedi Sezione 4.1) dice che la prova di correttezza si articola in 3 parti.
Concentriamoci sulla parte (3), che considera l'uscita dal ciclo.
La regola dice che in questo caso dobbiamo dimostrare che:}

\noindent\textbf{R1 \&\& !(i<6) $\Rightarrow$ POST}.

\textit{Da \textbf{(0$\leq$\texttt{i}$\leq$6)}, contenuta in \textbf{R1}, assieme a \textbf{!(0$<$\texttt{i}$<$6)$\equiv$(0$>$i$>$6)}, 
segue che \texttt{i}=\textbf{6} e quindi, 
da \textbf{R1}, abbiamo che \textbf{$\forall$a $\in$ [0..5] e $\forall$b $\in$ [0..4], 
\texttt{C[a][b]} è definito}, 
che è uguale alla nostra \textbf{POST} e quindi l'implicazione è verificata!
In effetti, applicando la \textbf{ricetta di indicizzazione}, abbiamo costruito \textbf{R1} da \textbf{POST} proprio per fare in modo che esse coincidessero quando tutte le righe fossero riempite!}

\textit{Il nostro programma continua con}

\begin{codice}

for(int i = 0; i < 6; i++){    //R1
  comandi che riempono la riga i;
    //qui vogliamo che sia vero Q=(riempita la riga i)
}
\end{codice}

\textit{Precisiamo l'asserzione}
\textbf{Q=($\forall$b $\in$ [0..4], \texttt{C[a][b]} è definito)}
\textit{e avremo bisogno di un ciclo, che esegue 5 letture riempiendo con i 5 valori letti la riga i-esima di \texttt{C} in modo da arrivare in uno stato in cui vale \textbf{Q}.
Di nuovo usiamo la ricetta di indicizzazione per ricavare l'invariante di questo ciclo da \textbf{Q}, cioè sostituiamo in \textbf{Q} a 4 l'indice \texttt{j-1} (si ricordi che \texttt{j} scorre le colonne).
L'invariante che otteniamo è:}

\noindent\textbf{R=($\forall$b $\in$ \texttt{[0..j-1]}, \texttt{C[a][b]} è 
definito)\&\&(0$\leq$\texttt{j}$\leq$5)}.

\textit{A questo punto dovrebbe essere facile capire che, quando si uscirà dal ciclo, \texttt{j=5} e quindi \textbf{R} con \texttt{j=5} diventa \textbf{Q}.
Il ciclo che scorre le righe è:}

\begin{codice}

for(int j = 0; i < 5; j++)    //R
  IN >> C[i][j];
//Q
\end{codice}

\textit{e la correttezza della sua condizione di uscita dal ciclo è automatica grazie alla ricetta di indicizzazione.
La parte (2) della correttezza, cioè l'invarianza di \textbf{R}, è vera perché la lettura rende vera}
\textbf{($\forall$b $\in$ \texttt{[0..j]}, \texttt{C[i][b]} è definito)}
\textit{e l'incremento \texttt{j++} rende di nuovo vero \textbf{R}.
Nota anche che quando eseguiamo il corpo, la condizione di permanenza è vera e allora \texttt{j<5} e \texttt{j++} rende vero \texttt{j<=5} come richiesto da \textbf{R}.
La condizione iniziale del ciclo è facile:
la prima volta \texttt{j=0} e quindi} 
\textbf{R = ($\forall$b $\in$ \texttt{[0..0-1],..})\&\&(0$\leq$\texttt{j}$\leq$5)}
\textit{e dato che [0..-1] è l'intervallo vuoto, è banalmente vero che per tutti i b in questo intervallo (cioè nessuno) \texttt{C[i][b]} è definita.
Inoltre j=0 è nell'intervallo richiesto da \textbf{R}}.

\textit{Ora cerchiamo di dimostrare la parte (2) del primo ciclo (invarianza di \textbf{R1}).
Usiamo la prova del ciclo interno che ci dice che dopo il ciclo interno vale \textbf{Q}, e \textbf{R1$\&\&$Q} implica che abbiamo riempito una riga in più rispetto a quelle riempite in \textbf{R1}, quindi vale:}
\textbf{($\forall$a $\in$ \texttt{[0..i]} e $\forall$b $\in$ \texttt{[0..4]}, \texttt{C[a][b]} è definito)\&\&(0$\leq$\texttt{i}<6)}
\textit{e dopo aver eseguito l'incremento \texttt{i++} (del primo \texttt{for}), questo diventa \textbf{R1}}.

\textit{La condizione iniziale del primo ciclo è simile a quella del ciclo interno.
Il fatto che si parta con i=0, rende \textbf{R1} banalmente verificata.}

\textit{Dalla parte di esercizio appena sviluppata, abbiamo formalizzato la \textbf{ricetta di indicizzazione} che continueremo ad usare nel resto dell'esercizio e anche nel resto del libro.
Deve essere chiaro che questa \textbf{ricetta} non è sempre sufficiente a ricavare l'invariante, ma in ogni caso essa ci fornisce un utile punto di partenza per ottenerlo.
Nel seguito useremo questa ricetta per costruire e dimostrare la correttezza della seconda parte dell'esercizio, cioè il calcolo di \texttt{B}.
Iniziamo con descrivere cosa deve essere vero dopo la parte di programma che definisce \texttt{B}}.

\textbf{POST1=(\texttt{B} è calcolata bene)}
\textit{che si può scrivere in modo preciso come segue,}
\textbf{($\forall$a $\in$ \texttt{[0..5]} e $\forall$b $\in$ \texttt{[0..4]}, \texttt{B[a][b]} sse
\texttt{C[a]} è contenuta in \texttt{C[..][b]})}.

\textit{Visto che B viene riempita per righe, servono anche qui 2 cicli \texttt{for} annidati, il più esterno che scandisce le righe di \texttt{B} e quello interno che scandisce le colonne.
Assumiamo che gli indici dei due cicli siano \texttt{i} e \texttt{j}, rispettivamente.
Allora l'invariante del ciclo più esterno (secondo la ricetta delineata prima) lo ricaviamo modificando \textbf{POST1} nel modo seguente:}
\textbf{R1=($\forall$a $\in$ \texttt{[0..i-1]} e $\forall$b $\in$ \texttt{[0..4]}, \texttt{B[a][b]} sse
\texttt{C[a]} è contenuta in \texttt{C[..][b]})\&\&(0$\leq$\texttt{i}$\leq$6)}
\textit{e quello del \texttt{for} interno avrà invariante:}
\textbf{R2=($\forall$b $\in$ \texttt{[0..j-1]}, \texttt{B[i][b]} sse
\texttt{C[i]} è contenuta in \texttt{C[..][b])}\&\&(0$\leq$\texttt{j}$\leq$5)}
\textit{e alla fine di questo ciclo dovrà valere l'asserzione,}
\textbf{POST2=(ho messo a posto la riga \texttt{i})}
\textit{che è espressa in maniera precisa nel modo seguente,}
\textbf{R2=($\forall$b $\in$ \texttt{[0..4]}, \texttt{B[i][b]} sse
\texttt{C[i]} è contenuta in \texttt{C[..][b]})}.
\textit{Si osservi che \textbf{POST2} è ottenuta da \textbf{R2} con la solita \textbf{ricetta}, ma applicata nella direzione opposta rispetto al solito.
Quindi il programma che riempie B comincia così:}

\begin{codice}

for(int i = 0; i < 6; i++);      //R1
  for(int j = 0; j < 5; j++);    //R2
\end{codice}

\textit{Il corpo del ciclo interno deve mantenere \textbf{R2} invariante e quindi deve inserire il valore giusto in \texttt{B[i][j]} e questo lo possiamo esprimere così:
il blocco deve consistere nel calcolo di una variabile booleana, diciamo \texttt{OK}, che godrà della seguente proprietà:}
\textbf{POST3=(\texttt{OK} sse $\forall$b $\in$ \texttt{[0..4]} $\exists$a $\in$ \texttt{[0..5]}, \texttt{C[i][b]=C[a][j]})}.

\textit{Per calcolare una tale variabile \texttt{OK}, la formula esprime chiaramente che abbiamo bisogno di un ciclo che scorra la riga (useremo l'indice \texttt{k}) ed un secondo \texttt{for} annidato che scorra la colonna (useremo l'indice \texttt{z}) per cercare l'elemento corrente della riga.}

\textit{L'invariante del primo ciclo lo otteniamo di nuovo facilmente da} \textbf{POST3:}

\noindent\textbf{R3=(\texttt{OK} sse $\forall$b $\in$ \texttt{[0..k-1]} $\exists$a $\in$ \texttt{[0..5]}, \texttt{C[i][b]=C[a][j]})\&\&(0$\leq$\texttt{k}$\leq$5)}
\textit{in sostanza \texttt{OK} ci da l'informazione che vogliamo fino all'elemento \texttt{k-1}.
Quindi il corpo del terzo \texttt{for} deve calcolare l'informazione se \texttt{C[i][k]} è in C\texttt{[..][j]} o no, in altre parole deve produrre un booleano, chiamiamolo \texttt{trovato}, che alla fine del blocco soddisfi:}

\noindent\textbf{POST4=(\texttt{trovato} sse $\exists$a $\in$ \texttt{[0..5]}, tale che \texttt{C[i][k]=C[a][j]})}.

Da \textbf{POST4} otteniamo nel solito modo \textbf{R4} invariante dell'ultimo(quarto) ciclo:

\noindent\textbf{R4=(\texttt{trovato} sse $\exists$a $\in$ \texttt{[0..z-1]}, tale che \texttt{C[i][k]=C[a][j]})\&\&(0$\leq$\texttt{z}$\leq$6)}

\noindent\textit{La relazione tra \textbf{R4} e \textbf{POST4} è quella della nostra \textbf{ricetta} e quindi garantisce che, all'uscita del ciclo, allorché vale \texttt{(z==6)}, sia vera \textbf{POST4}.
Quindi il ciclo più annidato è come segue:}

\begin{codice}

bool trovato = false; 
  for(int z = 0; z < 6; z++) //R4
    if(C[i][k] == C[z][j])
      trovato = true;
//POST4
\end{codice}

\textit{Il fatto che \textbf{R4} è invariante è facile:
fa avanzare di 1 la porzione controllata della colonna \texttt{j}, cioè, dopo il test vale:}
\textbf{(\texttt{trovato} sse $\exists$a $\in$ \texttt{[0..z]}, tale che \texttt{C[i][k]=C[a][j]})\&\&(0$\leq$\texttt{z}$\leq$6)}
\textit{e quindi \texttt{z++} rende nuovamente vero \textbf{R4}}. 

\textit{Vale anche la pena di controllare che \textbf{R4} sia vera la prima volta che si arriva a valutare il test di permanenza del quarto ciclo:
in questo caso \texttt{trovato=false} quindi \textbf{R4} diventa}
\textbf{(\texttt{false} sse $\exists$a $\in$ \texttt{[0..0-1]}, tale che \texttt{C[i][k]=C[a][j]})\&\&(0$\leq$\texttt{z}$\leq$6)}
\textit{e visto che [0,-1] è vuoto, ne segue che}
\textbf{($\exists$a $\in$ \texttt{[0..-1]}, tale che \texttt{C[i][k]=C[a][j]})}
\textit{è falso.
Quindi abbiamo \textbf{(falso sse falso)} che è vero.}

\textit{Mettiamo ora assieme i quattro cicli annidati:}

\begin{codice}

for(int i = 0; i < 6; i++)
{
  for(int j = 0; j < 5; j++)
  {
    bool OK = true;
    for(int k = 0; k < 5; k++)
    {
      bool trovato = false;
      for(int z = 0; z < 6; z++)
        if(C[i][k] == C[z][j])
          trovato = true;
      if(!trovato)  
        OK = false;
    }
    B[i][j] = OK;  //POST3 ci dice che e' la cosa giusta
  }
}
//POST1 = (per ogni a in [0..5] e per ogni b in [0..4], B[a][b]
//sse C[a] e' contenuta in C[..][b])
\end{codice}

\textit{Il programma appena presentato può fare dei calcoli inutili nei due cicli più interni.
Per il terzo ciclo è inutile continuare a cercare successivi elementi di \texttt{C[i]} dopo averne trovato uno che non è presente in \texttt{C[..][j]}.
Per il quarto ciclo è inutile continuare a cercare \texttt{C[i][k]} quando lo si è già trovato in \texttt{C[..][j]}.
Le modifiche sono semplici:
basta aggiungere una seconda condizione d'uscita a questi due \texttt{for}, come segue:}

\begin{codice}

for(int k = 0; k < 5 && OK; k++)  //R3
{
  bool trovato = false;
  for(int z = 0; z < 6 && !trovato; z++)  //R4
    if(C[i][k] == C[z][j])
          trovato = true;
  if(!trovato)  
    OK = false;
}
\end{codice}

\textit{Gli invarianti trovati prima continuano a valere. 
Le dimostrazioni dell'inizializzazione e invarianza di questi 2 cicli non cambiano, ma la condizione d'uscita dal ciclo va riconsiderata visto che ora si può uscire da questi due cicli anche con \texttt{k<5} e \texttt{z<6}.
Consideriamo quindi la dimostrazione del nuovo caso d'uscita:}

\noindent\textbf{(R3 \&\& \texttt{!OK} $\Rightarrow$ POST3)}
\textit{(si ricordi che fondamentalmente \textbf{POST3} asserisce che (\texttt{!OK} \textbf{va bene})):}

\noindent\textbf{R3 \&\& \texttt{!OK} $\Rightarrow$ (\texttt{false} sse $\forall$b $\in$ \texttt{[0..k-1]}, $\exists$a $\in$ \texttt{[0..5]}, \texttt{C[i][b]=C[a][j]})}

\noindent\textit{che è equivalente ad asserire che:}

\noindent\textbf{(*) ($\exists$b $\in$ \texttt{[0..k-1]} tale che !$\exists$a $\in$ \texttt{[0..5]} tale che \texttt{C[i][b]=C[a][j]})}

\noindent\textit{e questo implica che \textbf{POST3} è vera, visto che \textbf{POST3} con \texttt{OK} uguale a \texttt{false} è}

\noindent\textbf{(\texttt{false} sse $\forall$b $\in$ \texttt{[0..4]} !$\exists$a $\in$ \texttt{[0..5]}, \texttt{C[i][b]=C[a][j]})}
\textit{e la parte destra di questa equivalenza è falsa a causa di \textbf{(*)}.}

\textit{Sarebbe anche abbastanza facile eliminare la variabile booleana \texttt{trovato} ed usare \texttt{OK} al suo posto.}

\begin{codice}

bool OK = true;
for(int k = 0; k < 5 && OK; k++)
{
  OK = false;
  for(int z = 0; z < 6 && !OK; z++)
    if(C[i][k] == C[z][j])
          OK = true;
}  //risparmiando un condizionale
\end{codice}

\textit{Basta riscrivere le asserzioni \textbf{R4} e \textbf{POST4} sostituendo \texttt{trovato} con \texttt{OK}.
Le prove restano valide.}

Il prossimo esercizio risolto estende il precedente considerando l'm-contenimento al posto del contenimento insiemistico normale.
Nonostante l'esercizio sia molto simile al precedente, la sua prova di correttezza richiede un notevole sforzo aggiuntivo.
L'esercizio illustra alcune tecniche di prova più complesse di quelle viste finora.
Il lettore dovrebbe capire che non c'è mai una sola strada per produrre una dimostrazione di correttezza.
Armati di tecniche, ma soprattutto di intelligenza e fantasia, dobbiamo di volta in volta trovare la notazione e l'approccio più adatto ad ottenere una dimostrazione convincente e semplice.

\paragraph{Esercizio Risolto 6.2}
\textit{Consideriamo ora brevemente la realizzazione di un programma che risolve un esercizio simile al precedente, ma in cui la condizione da verificare è la seguente: \texttt{B[i][j]} è \texttt{true} se la riga \texttt{i}-esima di \texttt{C} è m-contenuta nella colonna \texttt{j}-esima di \texttt{C} e altrimenti è \texttt{false}, vedi la Definizione 6.1 per la nozione di m-contenimento.}

\textit{Si tratta di lavorare sui due cicli più interni, quelli che eseguono il test di contenimento della riga nella colonna che deve diventare un test di m-contenimento.}

\textit{L'idea è la seguente:
ogni volta che trovo che \texttt{C[i][k]} è uguale a \texttt{C[z][j]}, segno in qualche modo \texttt{C[z][j]} in modo da non usarlo più quando cercherò i successivi elementi di \texttt{C[i][k+1..]}.
Come possiamo realizzare questo mar­caggio?
Una tecnica è di dichiarare un array di booleani \texttt{bool T[6]} (lungo quanto una colonna di \texttt{C}, riempito inizialmente di \texttt{false} e che, qualora si trovi che \texttt{C[i][k]} è uguale a \texttt{C[z][j]}, ricordi che \texttt{C[z][j]} non deve più essere usato nel futuro, assegnando a \texttt{T[z]} il valore \texttt{true}.
Vediamo:}

\begin{codice}

bool T[6] = {};
bool OK = true;
for(int k = 0; k < 5 && OK; k++)  //R3'
{
  OK = false;
  for(int z = 0; z < 6 && !OK; z++)  //R4'
    if(!T[z] && C[i][k] == C[z][j])
    {
      OK = true;
      T[z] = true;    
    }
    //POST4'
}
//POST3'
\end{codice}

\noindent\textbf{POST3'=(\texttt{OK} sse $\forall$b $\in$ \texttt{[0..4]}, $\exists$ un distinto a $\in$ \texttt{[0..5]} tale che \texttt{C[i][b]=C[a][j]})}.

\noindent\textit{Questa asserzione ci fa capire che la tecnica adottata richiede di abbandonare il ciclo più interno non appena trovato(non marcato) l'elemento corrente della riga,
altrimenti si marcherebbe non uno solo, ma tutti gli elementi della colonna che sono uguali ad esso.}

\textit{Proviamo ad ottenere \textbf{R3'} da \textbf{POST3'} applicando la solita ricetta:}

\noindent\textbf{(\texttt{OK} sse $\forall$b $\in$ \texttt{[0..k-1]}, $\exists$ un distinto a $\in$ \texttt{[0..5]} tale che \texttt{C[i][b]=C[a][j]})\&\&(0$\leq$\texttt{k}$\leq$5)}.

\noindent\textit{Questa asserzione ci sarà utile, ma certamente non è completa, infatti non dice nulla su \texttt{T}, mentre l'invariante di questo ciclo deve asserire qualcosa su \texttt{T} che viene usato per realizzare il test di m-contenimento.
L'invariante \textbf{R3'} completo segue.
Conviene dividerlo in 3 parti in quanto, in caso \texttt{OK} sia falso, non si vuole asserire nulla su \texttt{T}:}

\noindent\textbf{R3'=}

\begin{itemize}
\item
\texttt{OK} $\Rightarrow$ $\exists$[a\ped{0},...,a\ped{k-1}], 
\textbf{a due a due diversi e tutti $\in$ [0..5] 
tali che }(\texttt{C[i][0]
=C[}a\ped{0}\texttt{][j] ... C[i][k-1]=C[}a\ped{k-1}\texttt{][j]}
\textbf{\&\&}
\texttt{T[}a\ped{0}\texttt{]=true ... T[}a\ped{k-1}\texttt{]=true)}
\textbf{\&\&(gli altri elementi di \texttt{T} sono \texttt{false})};

\item
\texttt{!OK} $\Rightarrow$ $\nexists$[a\ped{0},...,a\ped{k-1}], 
\textbf{a due a due diversi e tutti $\in$ [0..5] 
tali che }(\texttt{C[i][0]
=C[}a\ped{0}\texttt{][j] ... C[i][k-1]=C[}a\ped{k-1}\texttt{][j]};

\item
\textbf{(0$\leq$\texttt{k}$\leq$5)}

\end{itemize}

\textit{Nonostante non sia stato ricavato con la \textbf{ricetta}, è facile convincersi che \textbf{R3'} assieme a \texttt{(k=5 $||$ !OK)} implica \textbf{POST3'}:
\texttt{OK} riflette correttamente il risultato del test di m-inclusione.}

\textit{A questo punto, quale potrebbe essere fa postcondizione \textbf{POST4'} del ciclo interno (quello con indice \texttt{z})?
Questa asserzione deve asserire che se \texttt{OK} è diventato \texttt{true} allora in \texttt{T} è stato aggiunto esattamente un \texttt{true}(rispetto a prima).
Per farlo dobbiamo usare un trucco che ci servirà anche altre volte.
Con \texttt{'T} indichiamo il valore di \texttt{T} al momento in cui il quarto ciclo(quello con \texttt{z}) viene raggiunto per la prima volta.
Non asseriamo nulla sul suo valore, ma introduciamo la notazione \texttt{'T} che permette di confrontare il valore di \texttt{T} all'uscita dal ciclo con quello all'inizio del ciclo, \texttt{'T}.}

\noindent\textit{\textbf{POST4'} consiste di due parti:}

\begin{itemize}

\item(
\texttt{OK} $\Rightarrow$ $\exists$a, 
\textbf{$\in$ [0..5] tale che} (\texttt{C[i][k]=C[a][j]}
\textbf{\&\&} \texttt{T[a]=true}
\textbf{\&\&} \texttt{T[a]$\neq$'T[a]}
\textbf{\&\&} $\forall$b $\in$ \textbf{[0..5] con}
b$\neq$a \texttt{T[a]='T[a]}));

\item
\texttt{!OK} $\Rightarrow$ $\nexists$a, 
\textbf{$\in$ [0..5] tale che} (\texttt{C[i][k]=C[a][j]}
\textbf{\&\&} \texttt{'T[a]=false});

\end{itemize}

\textit{\textbf{POST4'} asserisce che il ciclo più interno assegna ad \texttt{OK} un valore che permette di estendere in modo corretto l'invariante \textbf{R3'} al prossimo elemento \texttt{C[i][k]}.
L'invariante \textbf{R4'} si ottiene da \textbf{POST4'} applicando la ricetta e sostituendo \texttt{z-1} a 5.
Che \textbf{R4'} sia invariante del ciclo più interno è facile da vedere.
La condizione d'uscita è banale grazie alla \textbf{ricetta}.
La condizione iniziale è altrettanto semplice a causa del fatto che \texttt{z=0} e \texttt{OK=false}.}